Corriger un fichier CSV contenant des caractères mal affichés à cause de problèmes d'encodage, en particulier des artefacts comme ðŸ‡ªðŸ‡¸ (au lieu de 🇪🇸) ou â€™ (au lieu de ').

🧩 Étape par étape
1. Importation du module codecs
import codecs
Ce module permet de manipuler finement les encodages (utile si on veut contrôler ce qui se passe derrière .encode() et .decode()).

2. Définition des noms de fichiers
input_file = "tweets_csv_2.csv"
output_file = "tweets_csv_utf8_corrige_final.csv"

input_file : le fichier original, corrompu

output_file : le nouveau fichier corrigé qu'on va créer

3. Fonction double_decode(text)
def double_decode(text):
    current = text
    for _ in range(2):
        try:
            current = current.encode("latin1", errors="ignore").decode("utf-8", errors="ignore")
        except Exception:
            break
    return current


💡 But :
Corriger les caractères corrompus en simulant deux passages d'encodage incorrect.

🔁 Détail :
current.encode("latin1", errors="ignore") :

On transforme le texte en bytes, en supposant qu’il avait été mal encodé en latin1.

On ignore les caractères qui ne passent pas (errors="ignore").

.decode("utf-8", errors="ignore") :

On redécode ces bytes en UTF-8.

Cette opération est faite jusqu’à deux fois, car certains textes sont doublement corrompus (UTF-8 → ISO-8859-1 → UTF-8).

4. Lecture du fichier original
with open(input_file, "r", encoding="latin1", errors="replace") as f_in:
    lines = f_in.readlines()

On lit le fichier comme s’il était en ISO-8859-1 (latin1), ce qui permet d’absorber les erreurs d’affichage initiales.

errors="replace" remplace les caractères problématiques par � (mais on va essayer de les corriger ensuite).

5. Création du fichier corrigé
with open(output_file, "w", encoding="utf-8") as f_out:
    for line in lines:
        cleaned = double_decode(line)
        f_out.write(cleaned)
Pour chaque ligne :

On appelle double_decode() pour essayer de corriger les caractères mal encodés.

On écrit la version corrigée dans le nouveau fichier en encodage UTF-8 propre.

6. Message de fin
print(f"✅ Fichier corrigé enregistré sous : {output_file}")
Confirmation que tout a fonctionné et que le fichier final est prêt à être utilisé (par exemple dans Excel).

🎯 Résultat
Un fichier .csv qui :

Ne contient plus de Ã, ðŸ, â€™, etc.

Est bien encodé en UTF-8 (donc prêt pour Excel, Python, etc.)

Restaure les caractères accentués, émojis, symboles et apostrophes correctement
